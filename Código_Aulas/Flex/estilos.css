/*
Flexbox: técnica para criar layouts flexíveis e responsivos.

Flexbox, ou Flexible Box Layout, é uma técnica poderosa em CSS que
facilita o design de layouts flexíveis e responsivos. O modelo Flexbox 
oferece uma forma eficiente de distribuir espaço entre itens em um 
contêiner, mesmo quando seus tamanhos são desconhecidos ou dinâmicos. 

Ele é especialmente útil para alinhamentos complexos e pode ser aplicado 
tanto para layouts de página inteira quanto para componentes de interface 
do usuário menores.

Vou criar um exemplo prático para demonstrar como usar Flexbox para 
construir um layout responsivo, incluindo cabeçalho, conteúdo principal, 
barra lateral e rodapé.
*/

/* Estilos básicos */
body, h1, p {

    /* Remove as margens padrão do navegador para os
    elementos body, h1 e p. */
    margin: 0; 

    /* Remove o preenchimento padrão do navegador para os
    mesmos elementos. */
    padding: 0; 

    /* Define a família de fontes para Arial com um fallback
    para qualquer sans-serif disponível, garantindo uma
    aparência limpa e moderna do texto. */
    font-family: Arial, sans-serif; 

}

header, footer {

    /* Define a cor de fundo do cabeçalho e rodapé
    como um cinza escuro (#333). */
    background-color: #333;
    
    /* Define a cor do texto nestes elementos para branco,
    criando um contraste alto para fácil leitura. */
    color: white; 

    /* Centraliza o texto horizontalmente nos
    elementos header e footer. */
    text-align: center; 

    /* Aplica um preenchimento de 10px na vertical e 20px na
    horizontal, adicionando espaço entre o texto e as
    bordas desses elementos. */
    padding: 10px 20px; 

}

.container {

    /* Ativa o Flexbox no elemento container, permitindo um
    layout flexível e responsivo dos elementos filhos. */
    display: flex; 

    /* Define a direção dos itens flex como linha (horizontal),
    ordenando os elementos filhos lado a lado. */
    flex-direction: row;
    
    /* Define a altura do container para 80% da altura da
    viewport, utilizando uma unidade de medida relativa que
    adapta o tamanho do elemento ao tamanho da tela. */
    height: 80vh; 
}

aside {

    /* Define a cor de fundo do elemento aside como
    um cinza muito claro. */
    background-color: #f4f4f4;
    
    /* Atribui ao elemento aside a capacidade de crescer e
    ocupar 1 parte do espaço disponível no container flex,
    equilibrando o layout. */
    flex: 1; 

    /* Aplica um preenchimento de 20px em todas as direções
    dentro do elemento aside, criando espaço interno suficiente
    para o conteúdo. */
    padding: 20px; 
    
}

main {

    /* Define a cor de fundo do elemento main para branco. */
    background-color: #fff;
    
    /* Atribui ao elemento main a capacidade de tomar 3 partes
    do espaço disponível no container flex, dando-lhe maior
    espaço em comparação com o aside. */
    flex: 3; 

    /* Aplica um preenchimento de 20px em todas as direções
    dentro do main, garantindo espaço adequado para o conteúdo principal. */
    padding: 20px; 

}

footer {

    /* Reaplica a cor de fundo cinza escuro para o rodapé,
    mantendo a consistência com o cabeçalho. */
    background-color: #333;

    /* Mantém a cor do texto branco no rodapé para
    consistência e legibilidade. */
    color: white; 

    /* Reaplica o alinhamento centralizado do texto no rodapé. */
    text-align: center; 

    /* Reaplica o mesmo estilo de preenchimento do cabeçalho no
    rodapé para manter a uniformidade visual. */
    padding: 10px 20px; 

}


/*
Explicação do CSS com Flexbox

Flex Container: .container é definido como um contêiner Flexbox com 
display: flex;. Isso permite que todos os seus filhos diretos (neste 
caso, aside e main) se tornem flex items.

Flex Direction: flex-direction: row; estabelece que os itens flexíveis 
    devem ser alinhados em uma linha horizontal.

Flex: A propriedade flex é usada em aside e main para controlar a 
    proporção do espaço que cada um deve ocupar dentro do contêiner 
    flexível. aside toma 1 parte do espaço disponível, enquanto main 
    toma 3 partes, fazendo com que main seja significativamente maior 
    que aside.

Header e Footer: São estilizados com cores de fundo e alinhamento de 
    texto para melhorar a aparência e diferenciar as seções.

Visualização e Comportamento
Quando você visualizar a página, verá que aside e main estão alinhados 
horizontalmente, com main ocupando mais espaço do que aside devido à sua 
maior flexibilidade. O cabeçalho e o rodapé se estendem por toda a 
largura da página. O layout se adapta ao tamanho da janela do navegador, 
mantendo a proporção entre as seções laterais e o conteúdo principal. 

Este exemplo ilustra como Flexbox facilita o design de interfaces 
responsivas e adaptáveis sem o uso de float ou posicionamentos complexos.
*/